import { Subject } from 'rxjs/Subject';
import { SlackEventPayload } from "../models/slack-event-payload";
import { SlackSlashPayload } from "../models/slack-slash-payload";

export class SlackService {
  public static app_mention = new Subject<SlackEventPayload>();
  public static slash_command = new Subject<SlackSlashPayload>();
  public static channel_created = new Subject<SlackEventPayload>();
  public static channel_delete = new Subject<SlackEventPayload>();
  public static channel_rename = new Subject<SlackEventPayload>();
  public static channel_archive = new Subject<SlackEventPayload>();
  public static channel_unarchive = new Subject<SlackEventPayload>();
  public static channel_history_changed = new Subject<SlackEventPayload>();
  public static dnd_updated = new Subject<SlackEventPayload>();
  public static dnd_updated_user = new Subject<SlackEventPayload>();
  public static im_created = new Subject<SlackEventPayload>();
  public static im_open = new Subject<SlackEventPayload>();
  public static im_close = new Subject<SlackEventPayload>();
  public static im_history_changed = new Subject<SlackEventPayload>();
  public static group_open = new Subject<SlackEventPayload>();
  public static group_close = new Subject<SlackEventPayload>();
  public static group_archived = new Subject<SlackEventPayload>();
  public static group_unarchived = new Subject<SlackEventPayload>();
  public static group_rename = new Subject<SlackEventPayload>();
  public static group_history_changed = new Subject<SlackEventPayload>();
  public static message_groups = new Subject<SlackEventPayload>();
  public static file_created = new Subject<SlackEventPayload>();
  public static file_shared = new Subject<SlackEventPayload>();
  public static file_unshared = new Subject<SlackEventPayload>();
  public static file_public = new Subject<SlackEventPayload>();
  public static file_private = new Subject<SlackEventPayload>();
  public static file_changed = new Subject<SlackEventPayload>();
  public static file_deleted = new Subject<SlackEventPayload>();
  public static file_comment_added = new Subject<SlackEventPayload>();
  public static file_comment_edited = new Subject<SlackEventPayload>();
  public static file_comment_deleted = new Subject<SlackEventPayload>();
  public static member_joined_channel = new Subject<SlackEventPayload>();
  public static member_left_channel = new Subject<SlackEventPayload>();
  public static pin_added = new Subject<SlackEventPayload>();
  public static pin_removed = new Subject<SlackEventPayload>();
  public static user_change = new Subject<SlackEventPayload>();
  public static team_join = new Subject<SlackEventPayload>();
  public static star_added = new Subject<SlackEventPayload>();
  public static star_removed = new Subject<SlackEventPayload>();
  public static reaction_added = new Subject<SlackEventPayload>();
  public static reaction_removed = new Subject<SlackEventPayload>();
  public static emoji_changed = new Subject<SlackEventPayload>();
  public static team_rename = new Subject<SlackEventPayload>();
  public static team_domain_change = new Subject<SlackEventPayload>();
  public static email_domain_changed = new Subject<SlackEventPayload>();
  public static subteam_created = new Subject<SlackEventPayload>();
  public static subteam_updated = new Subject<SlackEventPayload>();
  public static subteam_members_changed = new Subject<SlackEventPayload>();
  public static subteam_self_added = new Subject<SlackEventPayload>();
  public static subteam_self_removed = new Subject<SlackEventPayload>();
  public static message_channels = new Subject<SlackEventPayload>();
  public static messahge_mpim = new Subject<SlackEventPayload>();
  public static link_shared = new Subject<SlackEventPayload>();
  public static message_im = new Subject<SlackEventPayload>();

  /*
   * This method will return then appropriate subject to listen to the event
   */
  public static handle(type:string):Subject<SlackEventPayload> {
    if(type == "app_mention") return SlackService.app_mention;
    if(type == "message.im") return SlackService.message_im;
    if(type == "channel_created") return SlackService.channel_created;
    if(type == "channel_delete") return SlackService.channel_delete;
    if(type == "channel_rename") return SlackService.channel_rename;
    if(type == "channel_archive") return SlackService.channel_archive;
    if(type == "channel_unarchive") return SlackService.channel_unarchive;
    if(type == "channel_history_changed") return SlackService.channel_history_changed;
    if(type == "dnd_updated") return SlackService.dnd_updated;
    if(type == "dnd_updated_user") return SlackService.dnd_updated_user;
    if(type == "im_created") return SlackService.im_created;
    if(type == "im_open") return SlackService.im_open;
    if(type == "im_close") return SlackService.im_close;
    if(type == "im_history_changed") return SlackService.im_history_changed;
    if(type == "group_open") return SlackService.group_open;
    if(type == "group_close") return SlackService.group_close;
    if(type == "group_archived") return SlackService.group_archived;
    if(type == "group_unarchived") return SlackService.group_unarchived;
    if(type == "group_rename") return SlackService.group_rename;
    if(type == "group_history_changed") return SlackService.group_history_changed;
    if(type == "message.groups") return SlackService.message_groups;
    if(type == "file_created") return SlackService.file_created;
    if(type == "file_shared") return SlackService.file_shared;
    if(type == "file_unshared") return SlackService.file_unshared;
    if(type == "file_public") return SlackService.file_public;
    if(type == "file_private") return SlackService.file_private;
    if(type == "file_changed") return SlackService.file_changed;
    if(type == "file_deleted") return SlackService.file_deleted;
    if(type == "file_comment_added") return SlackService.file_comment_added;
    if(type == "file_comment_edited") return SlackService.file_comment_edited;
    if(type == "file_comment_deleted") return SlackService.file_comment_deleted;
    if(type == "member_joined_channel") return SlackService.member_joined_channel;
    if(type == "member_left_channel") return SlackService.member_left_channel;
    if(type == "pin_added") return SlackService.pin_added;
    if(type == "pin_removed") return SlackService.pin_removed;
    if(type == "user_change") return SlackService.user_change;
    if(type == "team_join") return SlackService.team_join;
    if(type == "star_added") return SlackService.star_added;
    if(type == "star_removed") return SlackService.star_removed;
    if(type == "reaction_added") return SlackService.reaction_added;
    if(type == "reaction_removed") return SlackService.reaction_removed;
    if(type == "emoji_changed") return SlackService.emoji_changed;
    if(type == "team_rename") return SlackService.team_rename;
    if(type == "team_domain_change") return SlackService.team_domain_change;
    if(type == "email_domain_changed") return SlackService.email_domain_changed;
    if(type == "subteam_created") return SlackService.subteam_created;
    if(type == "subteam_updated") return SlackService.subteam_updated;
    if(type == "subteam_members_changed") return SlackService.subteam_members_changed;
    if(type == "subteam_self_added") return SlackService.subteam_self_added;
    if(type == "subteam_self_removed") return SlackService.team_rename;
    if(type == "message.channels") return SlackService.message_channels;
    if(type == "messahge.mpim") return SlackService.messahge_mpim;
    if(type == "link_shared") return SlackService.link_shared;
  }
}